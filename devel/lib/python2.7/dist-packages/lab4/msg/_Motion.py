# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lab4/Motion.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Motion(genpy.Message):
  _md5sum = "720b0c53a7b95aaae8783915252c8f0d"
  _type = "lab4/Motion"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 timeTag
geometry_msgs/Quaternion rotation1
float64 translation
geometry_msgs/Quaternion rotation2

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['timeTag','rotation1','translation','rotation2']
  _slot_types = ['int32','geometry_msgs/Quaternion','float64','geometry_msgs/Quaternion']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeTag,rotation1,translation,rotation2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Motion, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timeTag is None:
        self.timeTag = 0
      if self.rotation1 is None:
        self.rotation1 = geometry_msgs.msg.Quaternion()
      if self.translation is None:
        self.translation = 0.
      if self.rotation2 is None:
        self.rotation2 = geometry_msgs.msg.Quaternion()
    else:
      self.timeTag = 0
      self.rotation1 = geometry_msgs.msg.Quaternion()
      self.translation = 0.
      self.rotation2 = geometry_msgs.msg.Quaternion()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i9d.pack(_x.timeTag, _x.rotation1.x, _x.rotation1.y, _x.rotation1.z, _x.rotation1.w, _x.translation, _x.rotation2.x, _x.rotation2.y, _x.rotation2.z, _x.rotation2.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.rotation1 is None:
        self.rotation1 = geometry_msgs.msg.Quaternion()
      if self.rotation2 is None:
        self.rotation2 = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.timeTag, _x.rotation1.x, _x.rotation1.y, _x.rotation1.z, _x.rotation1.w, _x.translation, _x.rotation2.x, _x.rotation2.y, _x.rotation2.z, _x.rotation2.w,) = _struct_i9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i9d.pack(_x.timeTag, _x.rotation1.x, _x.rotation1.y, _x.rotation1.z, _x.rotation1.w, _x.translation, _x.rotation2.x, _x.rotation2.y, _x.rotation2.z, _x.rotation2.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.rotation1 is None:
        self.rotation1 = geometry_msgs.msg.Quaternion()
      if self.rotation2 is None:
        self.rotation2 = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.timeTag, _x.rotation1.x, _x.rotation1.y, _x.rotation1.z, _x.rotation1.w, _x.translation, _x.rotation2.x, _x.rotation2.y, _x.rotation2.z, _x.rotation2.w,) = _struct_i9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i9d = struct.Struct("<i9d")
