"""autogenerated by genpy from crazyflie_driver/AddCrazyflieRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import crazyflie_driver.msg

class AddCrazyflieRequest(genpy.Message):
  _md5sum = "281517a9f976c165030a3b33c63a9478"
  _type = "crazyflie_driver/AddCrazyflieRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string uri
string tf_prefix
float32 roll_trim
float32 pitch_trim
bool enable_logging
bool enable_parameters
LogBlock[] log_blocks

================================================================================
MSG: crazyflie_driver/LogBlock
string topic_name
int16 frequency
string[] variables

"""
  __slots__ = ['uri','tf_prefix','roll_trim','pitch_trim','enable_logging','enable_parameters','log_blocks']
  _slot_types = ['string','string','float32','float32','bool','bool','crazyflie_driver/LogBlock[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       uri,tf_prefix,roll_trim,pitch_trim,enable_logging,enable_parameters,log_blocks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AddCrazyflieRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.uri is None:
        self.uri = ''
      if self.tf_prefix is None:
        self.tf_prefix = ''
      if self.roll_trim is None:
        self.roll_trim = 0.
      if self.pitch_trim is None:
        self.pitch_trim = 0.
      if self.enable_logging is None:
        self.enable_logging = False
      if self.enable_parameters is None:
        self.enable_parameters = False
      if self.log_blocks is None:
        self.log_blocks = []
    else:
      self.uri = ''
      self.tf_prefix = ''
      self.roll_trim = 0.
      self.pitch_trim = 0.
      self.enable_logging = False
      self.enable_parameters = False
      self.log_blocks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tf_prefix
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f2B.pack(_x.roll_trim, _x.pitch_trim, _x.enable_logging, _x.enable_parameters))
      length = len(self.log_blocks)
      buff.write(_struct_I.pack(length))
      for val1 in self.log_blocks:
        _x = val1.topic_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_h.pack(val1.frequency))
        length = len(val1.variables)
        buff.write(_struct_I.pack(length))
        for val2 in val1.variables:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.log_blocks is None:
        self.log_blocks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uri = str[start:end].decode('utf-8')
      else:
        self.uri = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tf_prefix = str[start:end].decode('utf-8')
      else:
        self.tf_prefix = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.roll_trim, _x.pitch_trim, _x.enable_logging, _x.enable_parameters,) = _struct_2f2B.unpack(str[start:end])
      self.enable_logging = bool(self.enable_logging)
      self.enable_parameters = bool(self.enable_parameters)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.log_blocks = []
      for i in range(0, length):
        val1 = crazyflie_driver.msg.LogBlock()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.topic_name = str[start:end].decode('utf-8')
        else:
          val1.topic_name = str[start:end]
        start = end
        end += 2
        (val1.frequency,) = _struct_h.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.variables = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.variables.append(val2)
        self.log_blocks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tf_prefix
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f2B.pack(_x.roll_trim, _x.pitch_trim, _x.enable_logging, _x.enable_parameters))
      length = len(self.log_blocks)
      buff.write(_struct_I.pack(length))
      for val1 in self.log_blocks:
        _x = val1.topic_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_h.pack(val1.frequency))
        length = len(val1.variables)
        buff.write(_struct_I.pack(length))
        for val2 in val1.variables:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.log_blocks is None:
        self.log_blocks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uri = str[start:end].decode('utf-8')
      else:
        self.uri = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tf_prefix = str[start:end].decode('utf-8')
      else:
        self.tf_prefix = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.roll_trim, _x.pitch_trim, _x.enable_logging, _x.enable_parameters,) = _struct_2f2B.unpack(str[start:end])
      self.enable_logging = bool(self.enable_logging)
      self.enable_parameters = bool(self.enable_parameters)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.log_blocks = []
      for i in range(0, length):
        val1 = crazyflie_driver.msg.LogBlock()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.topic_name = str[start:end].decode('utf-8')
        else:
          val1.topic_name = str[start:end]
        start = end
        end += 2
        (val1.frequency,) = _struct_h.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.variables = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.variables.append(val2)
        self.log_blocks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f2B = struct.Struct("<2f2B")
_struct_h = struct.Struct("<h")
"""autogenerated by genpy from crazyflie_driver/AddCrazyflieResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AddCrazyflieResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "crazyflie_driver/AddCrazyflieResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AddCrazyflieResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class AddCrazyflie(object):
  _type          = 'crazyflie_driver/AddCrazyflie'
  _md5sum = '281517a9f976c165030a3b33c63a9478'
  _request_class  = AddCrazyflieRequest
  _response_class = AddCrazyflieResponse
